<Styles xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
				xmlns:mxe="clr-namespace:Eremex.AvaloniaUI.Controls.Editors;assembly=Eremex.Avalonia.Controls"
				xmlns:mxev="clr-namespace:Eremex.AvaloniaUI.Controls.Editors.Visuals;assembly=Eremex.Avalonia.Controls"
				xmlns:ec="clr-namespace:Eremex.AvaloniaUI.Controls;assembly=Eremex.Avalonia.Controls"
        xmlns:utils="clr-namespace:Eremex.AvaloniaUI.Controls.Utils;assembly=Eremex.Avalonia.Controls">


    <Style Selector=":is(mxe|TextEditor)[EditorMode=InplaceInactive]:showWatermark /template/ TextBlock#PART_RealEditorPresenter, 
           :is(mxe|ComboBoxEditor)[EditorMode=InplaceInactive]:showWatermark /template/ TextBlock#PART_RealEditorPresenter">
        <Setter Property="Foreground" Value="{DynamicResource Text/Neutral/Tertiary}"/>
    </Style>
    <Style Selector=":is(mxe|TextEditor)[EditorMode=InplaceInactive]:showWatermark:disabled /template/ TextBlock#PART_RealEditorPresenter, 
           :is(mxe|ComboBoxEditor)[EditorMode=InplaceInactive]:showWatermark:disabled /template/ TextBlock#PART_RealEditorPresenter">
        <Setter Property="Foreground" Value="{DynamicResource Text/Neutral/Disabled}"/>
    </Style>
    
    <Style Selector=":is(mxe|SpinEditor)[EditorMode=InplaceInactive][ShowEditorButtons=true][HasButtons=false] /template/ mxev|EditorInactiveContainer#PART_InactiveContentContainer,
					 :is(mxe|PopupEditor)[EditorMode=InplaceInactive][ShowEditorButtons=true][HasButtons=false] /template/ mxev|EditorInactiveContainer#PART_InactiveContentContainer">
        <Setter Property="InactiveRightButtonsPlaceholderWidth" Value="{StaticResource InactiveButtonPlaceholderWidth}"/>
    </Style>
	<Style Selector=":is(mxe|PopupEditor)[EditorMode=InplaceInactive][ShowHoverDecorator=true]:pointerover /template/ mxev|EditorInactiveContainer#PART_InactiveContentContainer,
					 				 :is(mxe|SpinEditor)[EditorMode=InplaceInactive][ShowHoverDecorator=true]:pointerover /template/ mxev|EditorInactiveContainer#PART_InactiveContentContainer,
					 :is(mxe|PopupEditor)[EditorMode=InplaceInactive][ShowEditorButtons=true][HasButtons=true] /template/ mxev|EditorInactiveContainer#PART_InactiveContentContainer,
					 :is(mxe|SpinEditor)[EditorMode=InplaceInactive][ShowEditorButtons=true][HasButtons=true] /template/ mxev|EditorInactiveContainer#PART_InactiveContentContainer">
			<Setter Property="InactiveRightButtonsPlaceholderWidth" Value="{Binding Buttons, RelativeSource={RelativeSource TemplatedParent}, Converter={mxev:PlaceholderMinWidthConverter FixedButtonsCount=1}, ConverterParameter=28}"/>
		  <Setter Property="InactiveLeftButtonsPlaceholderWidth" Value="{Binding Buttons, RelativeSource={RelativeSource TemplatedParent}, Converter={mxev:PlaceholderMinWidthConverter LeftButtonsFilter=True}, ConverterParameter=28}"/>
	</Style>
	<!--Popup Inactive-->
	
	<Style Selector=":is(mxe|PopupEditor)[EditorMode=InplaceInactive][ShowEditorButtons=true][HasButtons=false] /template/ mxev|EditorInactiveContainer#PART_InactiveContentContainer">
		<Setter Property="InactiveDecoratorTemplate" Value="{StaticResource OpenPopupButtonPresenterTemplate}"/>
	</Style>
	<Style Selector=":is(mxe|PopupEditor)[EditorMode=InplaceInactive][ShowEditorButtons=true][HasButtons=true] /template/ mxev|EditorInactiveContainer#PART_InactiveContentContainer">
		<Setter Property="InactiveDecoratorTemplate">
			<Setter.Value>
				<DataTemplate>
					<Panel>
						<mxev:InactiveIconButtonsPanel IsLeft="True" HorizontalAlignment="Left" Buttons="{Binding $parent[mxe:PopupEditor].Buttons}"/>
						<mxev:InactiveIconButtonsPanel HorizontalAlignment="Right" Buttons="{Binding $parent[mxe:PopupEditor].Buttons}" 
                                          DefaultButtonTemplate="{StaticResource OpenPopupButtonPresenterTemplate}"/>
					</Panel>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>	
    <Style Selector=":is(mxe|PopupEditor)[EditorMode=InplaceInactive][ShowHoverDecorator=true]:pointerover /template/ mxev|EditorInactiveContainer#PART_InactiveContentContainer">
        <Setter Property="InactiveDecoratorTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Panel>
											<Border BorderThickness="{StaticResource EditorBorderThickness}"
															CornerRadius="{StaticResource EditorCornerRadius}"
															MinHeight="0">
												<Border.Background>
													<MultiBinding Converter="{ec:BoolToObjectSelectionConverter}">
														<Binding Path="$parent[mxe:BaseEditor].SecondaryAppearance"/>
														<DynamicResourceExtension ResourceKey="Fill/Neutral/Secondary/Enabled"/>
														<DynamicResourceExtension ResourceKey="Fill/Neutral/Primary/Enabled"/>
													</MultiBinding>
												</Border.Background>
												<Border.BorderBrush>
													<MultiBinding Converter="{ec:BoolToObjectSelectionConverter}">
														<Binding Path="$parent[mxe:BaseEditor].SecondaryAppearance"/>
														<DynamicResourceExtension ResourceKey="TransparentBrush"/>
														<DynamicResourceExtension ResourceKey="Outline/Neutral/Transparent/Light"/>
													</MultiBinding>
												</Border.BorderBrush>
											</Border>
											<mxev:InactiveIconButtonsPanel IsLeft="True" HorizontalAlignment="Left" Buttons="{Binding $parent[mxe:PopupEditor].Buttons}"/>
											<mxev:InactiveIconButtonsPanel HorizontalAlignment="Right" Buttons="{Binding $parent[mxe:PopupEditor].Buttons}" 
                                                    DefaultButtonTemplate="{StaticResource OpenPopupButtonPresenterTemplate}"/>
                    </Panel>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

	<!--SpinEditor Inactive-->
	<Style Selector=":is(mxe|SpinEditor)[EditorMode=InplaceInactive][ShowEditorButtons=true][HasButtons=false] /template/ mxev|EditorInactiveContainer#PART_InactiveContentContainer">
		<Setter Property="InactiveDecoratorTemplate" Value="{StaticResource SpinUpDownButtonsPresenterTemplate}"/>
	</Style>

	<Style Selector=":is(mxe|SpinEditor)[EditorMode=InplaceInactive][ShowEditorButtons=true][HasButtons=true] /template/ mxev|EditorInactiveContainer#PART_InactiveContentContainer">
		<Setter Property="InactiveDecoratorTemplate">
			<Setter.Value>
				<DataTemplate>
					<Panel>
						<mxev:InactiveIconButtonsPanel IsLeft="True" HorizontalAlignment="Left" Buttons="{Binding $parent[mxe:SpinEditor].Buttons}"/>
						<mxev:InactiveIconButtonsPanel HorizontalAlignment="Right" Buttons="{Binding $parent[mxe:SpinEditor].Buttons}" 
                                          DefaultButtonTemplate="{StaticResource SpinUpDownButtonsPresenterTemplate}"/>
					</Panel>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style Selector=":is(mxe|SpinEditor)[EditorMode=InplaceInactive][ShowHoverDecorator=true]:pointerover /template/ mxev|EditorInactiveContainer#PART_InactiveContentContainer">
		<Setter Property="InactiveDecoratorTemplate">
			<Setter.Value>
				<DataTemplate>
					<Panel>
						<Border BorderThickness="{StaticResource EditorBorderThickness}"
										CornerRadius="{StaticResource EditorCornerRadius}"
										MinHeight="0">
							<Border.Background>
								<MultiBinding Converter="{ec:BoolToObjectSelectionConverter}">
									<Binding Path="$parent[mxe:BaseEditor].SecondaryAppearance"/>
									<DynamicResourceExtension ResourceKey="Fill/Neutral/Secondary/Enabled"/>
									<DynamicResourceExtension ResourceKey="Fill/Neutral/Primary/Enabled"/>
								</MultiBinding>
							</Border.Background>
							<Border.BorderBrush>
								<MultiBinding Converter="{ec:BoolToObjectSelectionConverter}">
									<Binding Path="$parent[mxe:BaseEditor].SecondaryAppearance"/>
									<DynamicResourceExtension ResourceKey="TransparentBrush"/>
									<DynamicResourceExtension ResourceKey="Outline/Neutral/Transparent/Light"/>
								</MultiBinding>
							</Border.BorderBrush>
						</Border>
						<mxev:InactiveIconButtonsPanel IsLeft="True" HorizontalAlignment="Left" Buttons="{Binding $parent[mxe:SpinEditor].Buttons}"/>
						<mxev:InactiveIconButtonsPanel HorizontalAlignment="Right" Buttons="{Binding $parent[mxe:SpinEditor].Buttons}"
                                          DefaultButtonTemplate="{StaticResource SpinUpDownButtonsPresenterTemplate}"/>
					</Panel>
				</DataTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!--End of SpinEditor Inactive-->
	
	<Style Selector=":is(mxe|TextEditor):readOnly">
		 <Setter Property="Foreground" Value="{DynamicResource Text/Neutral/Disabled}"/>
	 </Style>
	
    <Style Selector=":is(mxe|TextEditor):disabled">
        <Setter Property="BorderBrush" Value="{DynamicResource TransparentBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource Text/Neutral/Disabled}"/>
        <Setter Property="Background" Value="{DynamicResource TransparentBrush}" />
    </Style>

	<Style Selector="mxe|ButtonEditor:activeMode:disabled, mxe|ComboBoxEditor:activeMode:disabled, mxe|PopupColorEditor:activeMode:disabled,
           mxe|PopupEditor:activeMode:disabled, mxe|SpinEditor:activeMode:disabled, mxe|TextEditor:activeMode:disabled, mxe|DateEditor:activeMode:disabled, mxe|MemoEditor:activeMode:disabled">
		<Setter Property="Background" Value="{DynamicResource Fill/Neutral/Secondary/Enabled}"/>
	</Style>

	<Style Selector=":is(mxe|TextEditor)[ActualErrorShowMode=Inplace]:activeMode /template/ TextBox#PART_RealEditor /template/ PathIcon#PART_ErrorIndicator">
		<Setter Property="IsVisible" Value="True"/>
		<Setter Property="Margin" Value="{Binding $parent[mxe:BaseEditor].Padding, Converter={StaticResource ErrorIconSplitterThicknessConverter}, ConverterParameter=Right}"/>
	</Style>
	<Style Selector=":is(mxe|SpinEditor)[IsTextEditable=False][ActualErrorShowMode=Inplace]:activeMode /template/ TextBox#PART_RealEditor /template/ PathIcon#PART_ErrorIndicator">
		<Setter Property="IsVisible" Value="False"/>
	</Style>
	<Style Selector=":is(mxe|TextEditor)[ActualErrorShowMode=Full] /template/ Border#PART_RootBorder">
		<Setter Property="BorderBrush" Value="{DynamicResource Outline/Accent/Error}"/>
	</Style>
	<Style Selector=":is(mxe|CheckEditor)[ActualErrorShowMode=Full] /template/ Border#PART_RootBorder">
		<Setter Property="BorderBrush" Value="{DynamicResource Outline/Accent/Error}"/>
	</Style>
	<Style Selector=":is(mxe|TextEditor)[EditorMode=Standalone]:focus-within /template/ Border#PART_RootBorder,
					 :is(mxe|PopupEditor)[EditorMode=Standalone]:focus-in-popup /template/ Border#PART_RootBorder">
		<Setter Property="BorderBrush" Value="{DynamicResource Outline/Accent/Focus}"/>
	</Style>
	<Style Selector=":is(mxe|TextEditor)[ActualErrorShowMode=Full] /template/ TextBlock#PART_ErrorTextPresenter,
					 :is(mxe|CheckEditor)[ActualErrorShowMode=Full] /template/ TextBlock#PART_ErrorTextPresenter">
		<Setter Property="IsVisible" Value="True" />
	</Style>
	<Style Selector=":is(mxe|TextEditor)[ActualErrorShowMode=Full] /template/ Panel#PART_RealEditorPanel,
					 :is(mxe|CheckEditor)[ActualErrorShowMode=Full] /template/ Panel#PART_RealEditorPanel">
		<Setter Property="MinHeight" Value="{Binding $parent[mxe:BaseEditor].MinHeight}" />
	</Style>
</Styles>